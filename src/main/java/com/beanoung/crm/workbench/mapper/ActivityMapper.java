package com.beanoung.crm.workbench.mapper;

import com.beanoung.crm.commons.pojo.ReturnObject;
import com.beanoung.crm.workbench.pojo.Activity;
import com.beanoung.crm.workbench.pojo.ActivityExample;
import java.util.List;
import java.util.Map;

import com.beanoung.crm.workbench.pojo.ActivityRemark;
import org.apache.ibatis.annotations.Param;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int countByExample(ActivityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int deleteByExample(ActivityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    List<Activity> selectByExample(ActivityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int updateByExampleSelective(@Param("record") Activity record, @Param("example") ActivityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int updateByExample(@Param("record") Activity record, @Param("example") ActivityExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Nov 10 13:02:57 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 查询满足条件的市场活动并分页
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 查询满足条件的市场活动的总条数
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id批量删除活动
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询活动信息
     */
    Activity selectActivityById(String id);

    /**
     * 更新活动信息
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有活动
     */
    List<Activity> selectAllActivity();

    /**
     * 查询选中的活动
     */
    List<Activity> selectActivityByIds(String[] id);

    /**
     * 根据上传的文件插入市场活动
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询活动信息给详情页
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询已关联的活动信息
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据活动名和线索id查询未关联的活动
     */
    List<Activity> selectActivityByNameAndClueId(Map<String,Object> map);

    /**
     * 查询新建关联中的活动
     */
    List<Activity> selectActivityForDetailByIds(String[] id);

    /**
     * 查询已关联的活动,用于转换
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);

}